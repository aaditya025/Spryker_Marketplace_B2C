(window["webpackJsonp_yves_default"] = window["webpackJsonp_yves_default"] || []).push([["separate-returns-by-merchant"],{

/***/ "./src/Pyz/Yves/MerchantSalesReturnWidget/Theme/default/components/molecules/separate-returns-by-merchant/separate-returns-by-merchant.ts":
/*!************************************************************************************************************************************************!*\
  !*** ./src/Pyz/Yves/MerchantSalesReturnWidget/Theme/default/components/molecules/separate-returns-by-merchant/separate-returns-by-merchant.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SeparateReturnsByMerchant; });
/* harmony import */ var MerchantSalesReturnWidget_components_molecules_separate_returns_by_merchant_separate_returns_by_merchant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! MerchantSalesReturnWidget/components/molecules/separate-returns-by-merchant/separate-returns-by-merchant */ "./vendor/spryker-shop/merchant-sales-return-widget/src/SprykerShop/Yves/MerchantSalesReturnWidget/Theme/default/components/molecules/separate-returns-by-merchant/separate-returns-by-merchant.ts");

class SeparateReturnsByMerchant extends MerchantSalesReturnWidget_components_molecules_separate_returns_by_merchant_separate_returns_by_merchant__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.selectAllCheckboxes = void 0;
    this.checkedSelectAllItems = [];
    this.returnReasonDropdowns = void 0;
  }

  init() {
    this.selectAllCheckboxes = Array.from(document.getElementsByClassName(this.selectAllCheckboxesClassName));

    if (this.returnReasonDropdownClassName) {
      this.returnReasonDropdowns = Array.from(document.getElementsByClassName(this.returnReasonDropdownClassName));
    }

    super.init();
  }

  mapEvents() {
    this.mapSelectAllCheckboxesChangeEvent();
    super.mapEvents();
  }

  mapSelectAllCheckboxesChangeEvent() {
    this.selectAllCheckboxes.map(checkbox => {
      checkbox.addEventListener('change', event => {
        var target = event.target;
        target.checked ? this.onAddSelectAllCheckedItems(target) : this.onRemoveSelectAllCheckedItems();
      });
    });
  }

  onAddSelectAllCheckedItems(item) {
    this.checkedSelectAllItems.push(item);
    this.disableSelectAllItem(item);
  }

  onRemoveSelectAllCheckedItems() {
    this.checkedSelectAllItems = this.checkedSelectAllItems.filter(item => item.checked);

    if (this.checkedSelectAllItems.length) {
      return;
    }

    this.enableSelectAllItems();
  }

  disableItem(target) {
    this.disableItems(target, this.checkboxes, this.checkboxComponentClassname, this.checkboxDisabledComponentClassname);
    this.disableSelectAllItem(target);
  }

  disableSelectAllItem(target) {
    this.disableItems(target, this.selectAllCheckboxes, this.selectAllCheckboxesComponentClassName, this.selectAllCheckboxesComponentDisabledClassName);
  }

  enableAllItems() {
    this.enableItems(this.checkboxes, this.checkboxComponentClassname, this.checkboxDisabledComponentClassname);
    this.enableSelectAllItems();
  }

  enableSelectAllItems() {
    this.enableItems(this.selectAllCheckboxes, this.selectAllCheckboxesComponentClassName, this.selectAllCheckboxesComponentDisabledClassName);
  }

  disableItems(target, checkboxes, parentClassName, className) {
    var currentMerchantReference = target.getAttribute(this.merchantReference);
    checkboxes.forEach(checkbox => {
      if (checkbox.getAttribute(this.merchantReference) === currentMerchantReference) {
        return;
      }

      checkbox.disabled = true;
      checkbox.closest("." + parentClassName).classList.add(className);
    });
    this.returnReasonDropdowns.forEach(dropdown => {
      if (dropdown.getAttribute(this.merchantReference) === currentMerchantReference) {
        return;
      }

      dropdown.disabled = true;
    });
  }

  enableItems(checkboxes, parentClassName, className) {
    checkboxes.forEach(checkbox => {
      if (!checkbox.hasAttribute(this.isReturnable)) {
        return;
      }

      checkbox.disabled = false;
      checkbox.closest("." + parentClassName).classList.remove(className);
    });
    this.returnReasonDropdowns.forEach(dropdown => {
      if (!dropdown.hasAttribute(this.isReturnable)) {
        return;
      }

      dropdown.disabled = false;
    });
  }

  get checkboxDisabledComponentClass() {
    return this.getAttribute('checkbox-component-disabled-classname');
  }

  get selectAllCheckboxesClassName() {
    return this.getAttribute('select-all-checkboxes-classname');
  }

  get selectAllCheckboxesComponentClassName() {
    return this.getAttribute('select-all-checkboxes-component-classname');
  }

  get selectAllCheckboxesComponentDisabledClassName() {
    return this.getAttribute('select-all-checkboxes-component-disabled-classname');
  }

  get returnReasonDropdownClassName() {
    return this.getAttribute('return-reason-dropdown-classname');
  }

}

/***/ }),

/***/ "./vendor/spryker-shop/merchant-sales-return-widget/src/SprykerShop/Yves/MerchantSalesReturnWidget/Theme/default/components/molecules/separate-returns-by-merchant/separate-returns-by-merchant.ts":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/merchant-sales-return-widget/src/SprykerShop/Yves/MerchantSalesReturnWidget/Theme/default/components/molecules/separate-returns-by-merchant/separate-returns-by-merchant.ts ***!
  \*********************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SeparateReturnsByMerchant; });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");

class SeparateReturnsByMerchant extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.checkboxes = void 0;
    this.merchantReferenceName = void 0;
    this.checkedItems = void 0;
    this.checkboxComponentClassname = void 0;
    this.checkboxDisabledComponentClassname = void 0;
  }

  readyCallback() {}

  init() {
    this.checkedItems = [];
    this.merchantReferenceName = this.merchantReference;
    this.checkboxes = Array.from(document.getElementsByClassName(this.checkboxClassname));
    this.checkboxComponentClassname = this.checkboxComponentClass;
    this.checkboxDisabledComponentClassname = this.checkboxDisabledComponentClass;
    this.mapEvents();
  }

  mapEvents() {
    this.checkboxToggleAction();
  }

  checkboxToggleAction() {
    this.checkboxes.map(checkbox => {
      checkbox.addEventListener('change', event => {
        var target = event.target;
        target.checked ? this.onAddCheckedItem(target) : this.onRemoveCheckedItems();
      });
    });
  }

  onAddCheckedItem(item) {
    this.checkedItems.push(item);
    this.disableItem(item);
  }

  onRemoveCheckedItems() {
    this.checkedItems = this.checkedItems.filter(item => {
      return item.checked;
    });

    if (this.checkedItems.length) {
      return;
    }

    this.enableAllItems();
  }

  getCheckedItems(target) {
    this.checkedItems = this.checkboxes.filter(checkbox => {
      return checkbox.checked;
    });
  }

  disableItem(target) {
    var currentMerchantReference = target.getAttribute(this.merchantReference);
    var checkboxesToDisable = this.checkboxes.filter(checkbox => {
      return checkbox.getAttribute(this.merchantReference) !== currentMerchantReference;
    });
    checkboxesToDisable.map(checkbox => {
      checkbox.disabled = true;
      checkbox.closest("." + this.checkboxComponentClassname).classList.add("." + this.checkboxDisabledComponentClassname);
    });
  }

  enableAllItems() {
    this.checkboxes.map(checkbox => {
      if (!checkbox.hasAttribute(this.isReturnable)) {
        return;
      }

      checkbox.disabled = false;
      checkbox.closest("." + this.checkboxComponentClassname).classList.remove("." + this.checkboxDisabledComponentClassname);
    });
  }

  get merchantReference() {
    return this.getAttribute('merchant-reference-attribute-name');
  }

  get checkboxClassname() {
    return this.getAttribute('checkbox-classname');
  }

  get productItemClassname() {
    return this.getAttribute('product-item-classname');
  }

  get checkboxComponentClass() {
    return this.getAttribute('checkbox-component-classname');
  }

  get checkboxDisabledComponentClass() {
    return this.getAttribute('checkbox-disabled-component-classname');
  }

  get isReturnable() {
    return this.getAttribute('is-returnable-attribute-name');
  }

}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,